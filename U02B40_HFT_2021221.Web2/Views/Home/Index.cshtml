@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome to my Transaction Handler App</h1>

    @* This demo should be remowed from Homework *@
    <div id="basic-demo-app">
        {{ message }}
        @*<input type="text" v-bind:value="op1" /> + <input type="text" v-bind:value="op2" /> = {{ result }}*@
        <input type="number" v-model:value="op1" /> + <input type="number" v-model:value="op2" /> = {{ result }} (with computed prop: {{ resultAsComputedProp }})
        <button class="btn btn-primary" v-on:click="calculateResult">Calculate</button>
    </div>

    <div id="transaction-handler-app">
        <div class="button-container pb-3" style="text-align:center;">
            <button class="btn btn-secondary" v-on:click="loadTransactions">Load</button>
            <button class="btn btn-success" v-on:click="createTransaction">Create</button>
            <button v-if="enabledBackToList" class="btn btn-secondary" v-on:click="backToList">Back to list</button>
        </div>
        <div id="content" style="display: flex; justify-content: center; flex-wrap: wrap;">
            <div v-if="errors.length > 0">
                <span v-for="msg in errors" style="color:red;font-weight:bold;">{{ msg }}</span>
            </div>
            <div v-if="messages.length > 0">
                <span v-for="msg in messages" style="color:green;">{{ msg }}</span>
            </div>
            <template v-if="operationMode == 0">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Account Id</th>
                            <th>Amount</th>
                            <th>Currency</th>
                            <th>Time</th>
                            <th>Type</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="transaction in transactions">
                            <td>{{ transaction.id }}</td>
                            <td>{{ transaction.accountId }}</td>
                            <td>{{ transaction.amount }}</td>
                            <td>{{ transaction.currency }}</td>
                            <td>{{ transaction.transferTime }}</td>
                            <td>{{ transaction.type }}</td>
                            <td style="width:20%;text-align:right;">
                                <button class="btn btn-info" v-on:click="viewTransaction(transaction)">View</button>
                                <button class="btn btn-warning" v-on:click="editTransaction(transaction)">Edit</button>
                                <button class="btn btn-danger" v-on:click="deleteTransaction(transaction)">Delete</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </template>
            <template v-else-if="operationMode == 1">
                <view-component v-bind:transaction="selectedTransaction"></view-component>
            </template>
            <template v-else-if="operationMode == 2">
                <!--Create case-->
                <editor-component v-on:saved="savedSuccessfully"
                                  v-on:cancelled="operationCancelled"></editor-component>
            </template>
            <template v-else>
                <!--Edit case-->
                <editor-component v-bind:transaction="selectedTransaction"
                                  v-on:saved="savedSuccessfully"
                                  v-on:cancelled="operationCancelled"></editor-component>
            </template>
        </div>
    </div>
</div>

<script src="~/lib/vue/vue.js"></script>
<script src="~/lib/axios/axios.js"></script>

<script type="text/javascript">
    var app = new Vue({
        el: '#basic-demo-app',
        data: {
            message: 'It works!',
            op1: 11,
            op2: 2,
            result: 0,
            selectedOperand: 0
        },
        computed: {
            resultAsComputedProp() {
                return Number.parseInt(this.op1) + Number.parseInt(this.op2);
            }
        },
        methods: {
            calculateResult() {
                //this.result = Number.parseInt(this.op1) + Number.parseInt(this.op2);
                this.result = this.resultAsComputedProp;
            }
        },
        watch: {
            op1(oldVal, newVal) {
                this.calculateResult();
            },
            op2(newVal) {
                this.calculateResult();
            }
        }
    });

    const axi = axios.create({
        baseURL: 'http://localhost:3244/api/transaction/'
    });

    var transactionHandlerApp = new Vue({
        el: '#transaction-handler-app',
        data: {
            transactions: [],
            selectedTransaction: {},
            operationMode: 0, // 0 listing, 1 view, 2 create, 3 edit
            messages: [],
            errors: []
        },
        computed: {
            enabledBackToList() {
                return this.operationMode != 0;
            }
        },
        methods: {
            loadTransactions() {
                axi.get('GetAll').then((response) => {
                    this.transactions = response.data;
                    console.log(response.data);
                }).catch((err) => {
                    console.log(err);
                });
            },
            viewTransaction: function (transaction) {
                this.selectedTransaction = transaction;
                this.operationMode = 1;
            },
            createTransaction: function () {
                this.operationMode = 2;
            },
            editTransaction: function (transaction) {
                this.selectedTransaction = transaction;
                this.operationMode = 3;
            },
            deleteTransaction: function (transaction) {
                axi.delete('Delete/' + transaction.id).then((response) => { // Request body should not works there
                    if (response.data.isSuccess) {
                        this.messages.push("Transaction deleted successfully");
                        this.loadTransactions();

                        setTimeout(() => { this.messages = []; }, 3000);
                    } else {
                        this.erros = response.data.messages;
                        setTimeout(() => { this.errors = []; }, 3000);
                    }
                }).catch((err) => {
                    this.errors.push('Error occured during delete.');
                    setTimeout(() => { this.errors = []; }, 3000);
                });
            },
            backToList: function () {
                this.selectedTransaction = {};
                this.operationMode = 0;
            },
            savedSuccessfully(msg) {
                this.selectedTransaction = {};
                this.messages.push(msg);
                console.log("saved");
                this.loadTransactions();
                this.operationMode = 0;

                setTimeout(() => { this.messages = []; }, 3000);
            },
            operationCancelled() {
                this.selectedTransaction = {};
                this.messages.push("The operation has been cancelled.");

                console.warn("cancelled");
                this.operationMode = 0;
                setTimeout(() => { this.messages = []; }, 3000);
            }
        }
    });

    Vue.component('view-component', {
        props: ['transaction'],
        template: '#view-template'
    });

    Vue.component('editor-component', {
        props: ['transaction'],
        template: '#editor-template',
        data: function () {
            return {
                innerTransaction: {},
                accounts: [],
                currencies: [],
                types: [],
                isEdit: false,
                errors: []
            };
        },
        methods: {
            save() {
                if (this.isEdit) {
                    axi.put('Update', this.innerTransaction).then(this.handleSuccess).catch((err) => {
                        console.log(err);
                        this.handleError(['Error occured during processing.']);
                    });
                }
                else {
                    axi.post('Create', this.innerTransaction).then(this.handleSuccess).catch((err) => {
                        console.log(err);
                        this.handleError(['Error occured during processing.']);
                    });
                }
            },
            cancel() {
                this.$emit('cancelled');
            },
            handleSuccess(response) {
                if (response.data.isSuccess) {
                    this.$emit('saved', this.isEdit ? "Transaction edited successfully" : "Transaction created successfully");
                } else {
                    this.handleError(response.data.messages);
                }
            },
            handleError(errorMessages) {
                this.errors = errorMessages;

                setTimeout(() => { this.errors = []; }, 3000); // Auto error clean after 3sec
            }
        },
        created: function () {
            if (this.transaction != undefined) {
                this.isEdit = true;
                console.log('copy called');
                // Copy
                this.innerTransaction = {
                    id: this.transaction.id,
                    accountId: this.transaction.accountId,
                    amount: this.transaction.amount,
                    currency: this.transaction.currency,
                    type: this.transaction.type,
                    transferTime: this.transaction.transferTime

                };
                console.log(this.innerTransaction);
            } else {
                // Create new
                console.log('create called');
                this.innerTransaction = {
                    id: '0',
                    accountId: '0',
                    amount: '0',
                    currency: 'USD',
                    type: 'DIV',
                    transferTime: Date.now
                };
            }

            axi.get("GetAllAccounts").then((response) => {
                console.log(response.data);
                this.accounts = response.data;
            }).catch((err) => {
                console.log(err);
            });

            axi.get("GetAllCurrencies").then((response) => {
                console.log(response.data);
                this.currencies = response.data;
            }).catch((err) => {
                console.log(err);
            });

            axi.get("GetAllTypes").then((response) => {
                console.log(response.data);
                this.types = response.data;
            }).catch((err) => {
                console.log(err);
            });
        }
    });
</script>

<script type="text/x-template" id="view-template">
    <div style="text-align:left" class="transaction-view-container">
        <div>
            <strong>Id</strong><br />
            <label>{{ transaction.id }}</label>
        </div>
        <div>
            <strong>AccountId Id</strong><br />
            <label>{{ transaction.accountId }}</label>
        </div>
        <div>
            <strong>Amount</strong><br />
            <label>{{ transaction.amount}}</label>
        </div>
        <div>
            <strong>Currency</strong><br />
            <label>{{ transaction.currency }}</label>
        </div>
        <div>
            <strong>TransferTime</strong><br />
            <label>{{ transaction.transferTime }}</label>
        </div>
        <div>
            <strong>Type</strong><br />
            <label>{{ transaction.type }}</label>
        </div>
    </div>
</script>

<script type="text/x-template" id="editor-template">
    <div style="text-align:left" class="transaction-view-container">
        <div v-if="errors.length > 0">
            <span v-for="msg in errors" style="color:red;font-weight:bold;">{{ msg }}</span>
        </div>
        <div>
            <strong>AccountId</strong><br />
            <select id="account-selector" v-model="innerTransaction.accountId" class="form-control">
                <option v-for="account in accounts" v-bind:value="account.id">{{ account.id }}</option>
            </select>
        </div>
        <div>
            <strong>Amount</strong><br />
            <input type="text" v-model.number="innerTransaction.amount" class="form-control" />
        </div>
        <div>
            <strong>Currency</strong><br />
            <select id="currency-selector" v-model="innerTransaction.currency" class="form-control">
                <option v-for="currency in currencies" v-bind:value="currency.name">{{ currency.name }}</option>
            </select>
        </div>
        <div>
            <strong>Type</strong><br />
            <select id="type-selector" v-model="innerTransaction.type" class="form-control">
                <option v-for="type in types" v-bind:value="type.name">{{ type.name }}</option>
            </select>
        </div>
        <div>
            <strong>TransferTime</strong><br />
            <input type="date" v-model="innerTransaction.transferTime" class="form-control" >{{innerTransaction.transferTime}}</input>
        </div>
        <div class="float-right pt-3">
            <button class="btn btn-primary" v-on:click="save">Mentés</button>
            <button class="btn btn-secondary" v-on:click="cancel">Mégsem</button>
        </div>
    </div>
</script>
